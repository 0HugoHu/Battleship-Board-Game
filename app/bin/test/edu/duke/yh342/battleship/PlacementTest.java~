package edu.duke.yh342.battleship;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

public class PlacementTest {
  @Test
  public void test_get_coordinate_and_orientation() {
    Placement p1 = new Placement(new Coordinate(10, 20), 'V');
    Placement p2 = new Placement(new Coordinate(10, 20), 'v');
    assertThrows(IllegalArgumentException.class, () -> new Placement(new Coordinate(10, 20), 'x'));
    assertEquals(new Coordinate(10, 20), p1.getCoordinate());
    assertEquals('V', p1.getOrientation());
    assertEquals('V', p2.getOrientation());
    
  }

  @Test
  public void test_equals() {
    Placement p1 = new Placement(new Coordinate(10, 20), 'V');
    Placement p2 = new Placement(new Coordinate(10, 20), 'V');
    Placement p3 = new Placement(new Coordinate(10, 20), 'v');
    Placement p4 = new Placement(new Coordinate(10, 20), 'h');
    Placement p5 = new Placement(new Coordinate(9, 21), 'V');
    Placement p6 = new Placement(new Coordinate(20, 10), 'V');
    //assertEquals(p1, p2);   //equals should be reflexsive
    //assertEquals(p1, p3);   //different objects bu same contents
    assertNotEquals(p1, p4);  //different contents
    assertNotEquals(p1, p5);
    assertNotEquals(p1, p6);
    assertNotEquals(p1, "(10, 20)V"); //different types
  }

  @Test
  public void test_to_string() {
    Coordinate c1 = new Coordinate(1, 2);
    Coordinate c2 = new Coordinate(2, 1);
    Coordinate c3 = new Coordinate(1, 2);
    assertEquals(c1.toString(), c3.toString());
    assertNotEquals(c1.toString(), c2.toString());
    assertNotEquals(c2.toString(), c3.toString());
  }

  @Test
  public void test_hashCode() {
    Coordinate c1 = new Coordinate(1, 2);
    Coordinate c2 = new Coordinate(1, 2);
    Coordinate c3 = new Coordinate(0, 3);
    Coordinate c4 = new Coordinate(2, 1); 
    assertEquals(c1.hashCode(), c2.hashCode());
    assertNotEquals(c1.hashCode(), c3.hashCode());
    assertNotEquals(c1.hashCode(), c4.hashCode());
  }

  @Test
  void test_string_constructor_valid_cases() {
    Coordinate c1 = new Coordinate("B3");
    assertEquals(1, c1.getRow());
    assertEquals(3, c1.getColumn());
    Coordinate c2 = new Coordinate("D5");
    assertEquals(3, c2.getRow());
    assertEquals(5, c2.getColumn());
    Coordinate c3 = new Coordinate("A9");
    assertEquals(0, c3.getRow());
    assertEquals(9, c3.getColumn());
    Coordinate c4 = new Coordinate("Z0");
    assertEquals(25, c4.getRow());
    assertEquals(0, c4.getColumn());

  }
  @Test
  public void test_string_constructor_error_cases() {
    assertThrows(IllegalArgumentException.class, () -> new Coordinate("00"));
    assertThrows(IllegalArgumentException.class, () -> new Coordinate("AA"));
    assertThrows(IllegalArgumentException.class, () -> new Coordinate("@0"));
    assertThrows(IllegalArgumentException.class, () -> new Coordinate("[0"));
    assertThrows(IllegalArgumentException.class, () -> new Coordinate("A/"));
    assertThrows(IllegalArgumentException.class, () -> new Coordinate("A:"));
    assertThrows(IllegalArgumentException.class, () -> new Coordinate("A"));
    assertThrows(IllegalArgumentException.class, () -> new Coordinate("A12"));
  }

}
